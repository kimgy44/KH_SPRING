package com.di;

import java.io.FileInputStream;

import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.xml.XmlBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.InputStreamResource;
/*
 * spring-core.jar → XXX.class → main() 있나?
 * spring-context.jar - ApplicationContext
 * spring-beans.jar - BeanFactory
 * 생성해야하는 클래스명은 누가 결정해야하나?
 * 
 */
public class SonataSimulation {

	public static void main(String[] args) throws Exception {
		//객체 생성
		Sonata yourCar = new Sonata(); // 여기의 주소번지와
		//객체 소멸
		yourCar = null;//candidate상태로 전환되는코드임.  //null로 초기화 한후에 
		yourCar = new Sonata(); // 다시 인스턴스화 → 새로 주소번지 채번이 된다.
		// yourCar == yourCar => false
		ApplicationContext context = 
				new ClassPathXmlApplicationContext("com\\di\\sonataBean.xml");
		// scope를 생략한 경우
		// <bean id ="myCar" class="com.di.Sonata"/>
		Sonata myCar = (Sonata)context.getBean("myCar");
		Sonata myCar2 = (Sonata)context.getBean("myCar");
		System.out.println(myCar == myCar2);// true : 싱글톤 
		// scope를 prototype으로 한 경우
		Sonata himCar = (Sonata)context.getBean("himCar");
		Sonata himCar2 = (Sonata)context.getBean("himCar");
		System.out.println(himCar == himCar2);// true : 싱글톤 , false :prototype
		BeanFactory factory = 
				new XmlBeanFactory(new ClassPathResource("com\\di\\sonataBean.xml"));
		Sonata meCar = (Sonata)factory.getBean("myCar");
		System.out.println(myCar == meCar); // false
	}

}
